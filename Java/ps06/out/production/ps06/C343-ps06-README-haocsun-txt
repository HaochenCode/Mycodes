// C343/Summer 2022
// Problem Set 06
// 2022-6-10
// Haochen Sun / haocsun

Part A : Submitted as a pdf file

Part B:
The adjacency matrix:        The adjacency list:
  A  B  C  D  E  F           A   B -> C -> F
A    1  1        1           B   A -> C -> D
B 1     1  1                 C   A -> E -> F
C 1  1        1  1           D   B -> E
D    1        1              E   C -> D -> F
E       1  1     1           F   A -> C -> E
F 1     1     1

Space for List:
There are totally 23 nodes, which contains a pointer, a possible edge and a vertex label, so the total storage needed
is 23 * (1 + 4 + 2) = 161 bytes.
Space for Matrix:
Since it's basically implemented as a 2D array of integers with 6 rows and 6 columns, totally 6 * 6 ints to be stored,
and each integer requires 1 byte, so totally 6 * 6 * 1 = 36 bytes.

Answer: Adjacency List requires more space, since 161 > 36.


Part C:
The reason is the same as Part B, just the sizes changed, so the calculation will be as follows:
Space for List:
23 * (1 + 2 + 2) = 115 bytes
Space for Matrix:
6 * 6 * 1 = 36 bytes.

Answer: Adjacency List requires more space, since 115 > 36.