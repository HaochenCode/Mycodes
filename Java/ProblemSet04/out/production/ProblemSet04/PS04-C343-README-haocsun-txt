// C343/Summer 2022
// Problem Set 04
// 2022-6-1
// Haochen Sun / haocsun

1. Yes it is, since sortArray1 first sorts the 2D array by column, and then by rows, so it  guarantees the columns
to be sorted first, and then sort by rows, therefore make sure it's fully sorted in two dimensions.
2. Yes it is, since sortArray1 first sorts the 2D array by rows, and then by columns, so it  guarantees the rows
to be sorted first, and then sort by columns, therefore make sure it's fully sorted in two dimensions.

3. Since I used insertion sort for both functions, which is in O(n^2), and both sortArray1 and sortArray2 calls
sortRows and sortColumns function, although in different order and doesn't matter. If the 2D array contains m rows
and p columns, the sortRows function is in O(m * n^2), since the for loop repeats m times; similarly, sortColumns
is in O(p * n^2). To add them together, both sortArray1 and sortArray2 are in O( (m+p)n^2), which is O(n^2). But
if m == p == log2n, the function is in O(log2n * n^2).

